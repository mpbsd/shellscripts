#!/usr/bin/env bash
###############################################################################
# author: Marcelo Barboza <salve.barboza@pm.me>                               #
# date: 2025-01-22                                                            #
###############################################################################

# PKGADD {{{
function PKGADD() {
  STATUS="$1"
  BUNDLE="$2"
  if [[ -n "$(dpkg -l | sed -n "/^ii\s\+\<${BUNDLE}\>\s\+/p")" ]]; then
    echo "Found: ${BUNDLE}"
  else
    if [[ "$STATUS" = '--install-all-packages-in-a-new-debian-system' ]]; then
      echo -n "Package ${BUNDLE} not found."
      if echo "$BUNDLE" | grep -qF ':amd64'; then
        STACKS="${BUNDLE/%:amd64/}"
        sudo apt install -y "$STACKS"
      else
        sudo apt install -y "$BUNDLE"
      fi
      echo "Done installing ${BUNDLE}."
    else
      echo -n "Package ${BUNDLE} not found."
      echo -n " Would you like to install it? (y/N) "
      read -r ANSWER
      if [[ "$ANSWER" = 'y' ]]; then
        if echo "$BUNDLE" | grep -qF ':amd64'; then
          STACKS="${BUNDLE/%:amd64/}"
          sudo apt install -y "$STACKS"
        else
          sudo apt install -y "$BUNDLE"
        fi
        echo "Done installing ${BUNDLE}."
      fi
    fi
  fi
}
# }}}

# HELP {{{
function HELP() {
  printf '
  Usage: idebp [OPTION]

  \tInstalls my selection of packages on a Debian GNU/Linux system using apt.

  Available options:

  [-a|--install-all-packages-in-a-new-debian-system]

  \tAs the name suggests, this is intended to be used on a fresh installation of
  \tDebian. By default, it appends the -y flag to every package in the list.

  [-i|--install-missing-packages]

  \tInstall missing packages individually. Does not append the -y flag by
  \tdefault. Should be invoked every time a new package is added to the list.

  [-h|--help]

  \tPrints this message on the screen.\n\n'
}
# }}}

# TEXT_EDITORS {{{
declare -a TEXT_EDITORS=(
  nvi
  vim-nox
  vim-gtk3
)
# }}}
# READING {{{
declare -a READING=(
  calibre
)
# }}}
# C_DEVELOPMENT {{{
declare -a C_DEVELOPMENT=(
  build-essential
  gdb
  glibc-doc
  universal-ctags
  valgrind
  tcc
)
# }}}
# LUA {{{
declare -a LUA=(
  lua5.1
  luarocks
)
# }}}
# NODE {{{
declare -a NODE=(
  nodejs
  npm
)
# }}}
# RUBY {{{
declare -a RUBY=(
  rbenv
  ruby-build
)
# }}}
# CONTAINERS {{{
declare -a CONTAINERS=(
  podman
  podman-compose
)
# }}}
# PYTHON_DEVELOPMENT {{{
declare -a PYTHON_DEVELOPMENT=(
  python3-venv
  python3-pip
)
# }}}
# DATABASE {{{
declare -a DATABASE=(
  mariadb-client
  mariadb-server
  postgresql
  postgresql-client
  sqlite3
  sqlite3-doc
  xapers
)
# }}}
# MAIL_CHAT_AND_NEWS {{{
declare -a MAIL_CHAT_AND_NEWS=(
  abook
  irssi
  mutt
  newsboat
  telegram-desktop
  w3m
)
# }}}
# SYSTEM_MAINTENANCE {{{
declare -a SYSTEM_MAINTENANCE=(
  aptitude
  debconf-utils
  deborphan
  debsums
  stow
)
# }}}
# FUN_AND_GAMES {{{
declare -a FUN_AND_GAMES=(
  bsdgames
  cowsay
  fortunes
  hedgewars
  lolcat
  stockfish
)
# }}}
# FIRMWARE {{{
declare -a FIRMWARE=(
  firmware-realtek
)
# }}}
# SECURITY {{{
declare -a SECURITY=(
  keychain
  pass
  pass-otp
  signify-openbsd
  signify-openbsd-keys
  ufw
)
# }}}
# BLOGGING {{{
declare -a BLOGGING=(
  hugo
  lowdown
)
# }}}
# COREUTILS {{{
declare -a COREUTILS=(
  9base
  bat
  conky
  curl
  fd-find
  figlet
  fzf
  groff
  gtypist
  htop
  hub
  jhead
  ledger
  lf
  mpv
  ncdu
  nmap
  plocate
  qpdf
  redshift
  ripgrep
  rofi
  sc
  scrot
  sdcv
  silversearcher-ag
  thefuck
  tmux
  vifm
  xdotool
  xinput
  zathura
  zathura-djvu
)
# }}}
# SHELL {{{
declare -a SHELL=(
  dialog
  shellcheck
  shfmt
  xonsh
  xonsh-doc
  zsh
  zsh-autosuggestions
  zsh-doc
  zsh-syntax-highlighting
)
# }}}
# TERMINAL {{{
declare -a TERMINAL=(
  cool-retro-term
  kitty
)
# }}}
# LATEX {{{
declare -a LATEX=(
  texlive-full
  bibtool
  kile
)
# }}}
# IMAGE {{{
declare -a IMAGE=(
  # blender
  gimp
  inkscape
  xournalpp
)
# }}}
# BROWSER {{{
declare -a BROWSER=(
  chromium
  chromium-driver
)
# }}}
# SUCKLESS_SOFTWARE {{{
declare -a SUCKLESS_SOFTWARE=(
  dwm
  suckless-tools
  stterm
  surf
  libx11-dev:amd64
  libxft-dev:amd64
  libxinerama-dev:amd64
  libfreetype6-dev:amd64
  libharfbuzz-dev:amd64
)
# }}}
# AWESOME {{{
declare -a AWESOME=(
  awesome
  picom
)
# }}}
# NEOVIM {{{
declare -a NEOVIM=(
  ninja-build
  gettext
  cmake
  unzip
  curl
  build-essential
)
# }}}
# ZSA_WALLY {{{
declare -a ZSA_WALLY=(
  libusb-1.0-0-dev:amd64
)
# }}}
# QMK {{{
declare -a QMK=(
  gcc-arm-none-eabi
  gcc-avr
  avrdude
  dfu-programmer
  dfu-util
)
# }}}
# WIREGUARD {{{
declare -a WIREGUARD=(
  wireguard
  resolvconf
)
# }}}
# ANDROID {{{
declare -a ANDROID=(
  adb
  fastboot
)
# }}}

BUNDLES=( # {{{
  "${TEXT_EDITORS[@]}"
  "${READING[@]}"
  "${C_DEVELOPMENT[@]}"
  "${LUA[@]}"
  "${NODE[@]}"
  "${RUBY[@]}"
  "${CONTAINERS[@]}"
  "${PYTHON_DEVELOPMENT[@]}"
  "${DATABASE[@]}"
  "${MAIL_CHAT_AND_NEWS[@]}"
  "${SYSTEM_MAINTENANCE[@]}"
  "${FUN_AND_GAMES[@]}"
  "${FIRMWARE[@]}"
  "${SECURITY[@]}"
  "${BLOGGING[@]}"
  "${COREUTILS[@]}"
  "${SHELL[@]}"
  "${TERMINAL[@]}"
  "${LATEX[@]}"
  "${IMAGE[@]}"
  "${BROWSER[@]}"
  "${SUCKLESS_SOFTWARE[@]}"
  "${AWESOME[@]}"
  "${NEOVIM[@]}"
  "${ZSA_WALLY[@]}"
  "${QMK[@]}"
  "${WIREGUARD[@]}"
  "${ANDROID[@]}"
)
# }}}

# INSTALLING BUNDLES {{{
if [[ "$#" -eq 1 ]]; then
  case "$1" in
  -a | --install-all-packages-in-a-new-debian-system)
    for BUNDLE in "${BUNDLES[@]}"; do
      PKGADD --install-all-packages-in-a-new-debian-system "$BUNDLE"
    done
    ;;
  -i | --install-missing-packages)
    for BUNDLE in "${BUNDLES[@]}"; do
      PKGADD --install-missing-packages "$BUNDLE"
    done
    ;;
  *)
    HELP
    ;;
  esac
else
  HELP
fi
# }}}

exit 0
